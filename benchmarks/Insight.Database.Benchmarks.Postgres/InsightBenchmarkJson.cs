using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using BenchmarkDotNet.Attributes;
using Insight.Database.Benchmarks.Postgres.Models;
using Insight.Database.Providers.PostgreSQL;
using Npgsql;

namespace Insight.Database.Benchmarks.Postgres
{
    public class InsightBenchmarkJson : BaseBenchmark
    {
        protected NpgsqlConnection connection;

        public static IEnumerable<Post> PostsJson()
        {
            yield return new Post() { Text = string.Concat("{\"Text\": \"", new string('x', 2000), "\"}"), CreationDate = DateTime.Now, LastChangeDate = DateTime.Now };
        }

        [Benchmark(Description = "Insert<T> json")]
        [BenchmarkCategory("Write")]
        [ArgumentsSource(nameof(PostsJson))]
        public Post InsertPostJson(Post post) => connection.InsertSql("INSERT INTO PostJson (Child, CreationDate, LastChangeDate) VALUES (@Text, @CreationDate, @LastChangeDate) ", post);

        [Benchmark(Description = "Update<T> json")]
        [BenchmarkCategory("Write")]
        [ArgumentsSource(nameof(PostsJson))]
        public Post UpdatePostJson(Post post)
        {
            post.Id = param;
            return connection.QueryOntoSql("UPDATE PostJson SET Child = @Text, CreationDate = @CreationDate, LastChangeDate = @LastChangeDate output inserted.* WHERE Id = @Id", post);
        }

        [Benchmark(Description = "Single json")]
        [BenchmarkCategory("Read")]
        public PostJson SinglePostJson() => connection.SingleSql<PostJson, ChildJson>("SELECT * FROM PostJson WHERE Id = @param", new { param });

        [Benchmark(Description = "Single Async json")]
        [BenchmarkCategory("Read")]
        public async Task<PostJson> SingleAsyncPostJson() => await connection.SingleSqlAsync<PostJson, ChildJson>("SELECT * FROM PostJson WHERE Id = @param", new { param });

        [Benchmark(Description = "Query<T> json")]
        [BenchmarkCategory("Read")]
        public PostJson QueryPostJson() => connection.QuerySql<PostJson, ChildJson>("SELECT * FROM PostJson WHERE Id = @param", new { param }).FirstOrDefault();

        [Benchmark(Description = "Query<T> Async json")]
        [BenchmarkCategory("Read")]
        public async Task<PostJson> QueryAsyncPostJson()
        {
            var result = await connection.QuerySqlAsync<PostJson, ChildJson>("SELECT * FROM PostJson WHERE Id = @param", new { param });

            return result.FirstOrDefault();
        }

        [GlobalSetup]
        public void DbSetup()
        {
            connection = new NpgsqlConnection(connectionString);
            PostgreSQLInsightDbProvider.RegisterProvider();
            connection.Open();

            var cmd = connection.CreateCommand();

            cmd.CommandText = $@"
                DROP TABLE IF EXISTS PostJson;

                CREATE TABLE IF NOT EXISTS PostJson
                (
                    Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    Child JSON NOT NULL,
                    CreationDate DATE NOT NULL,
                    LastChangeDate DATE NOT NULL
                );

                DO $$
                DECLARE iter integer;
                        PostId integer;
                BEGIN
                    iter := 0;
                WHILE iter< {iterations}
                LOOP

                    INSERT INTO PostJson(Child, CreationDate, LastChangeDate)
                    SELECT to_json('\{ "text": ' || REPEAT('x', 2) || ' \}') Child, NOW(), NOW();

                    iter:= iter + 1;
                END LOOP;
                END $$;
";

            cmd.Connection = connection;
            cmd.ExecuteNonQuery();
        }

        [GlobalCleanup]
        public void DbCleanup()
        {
            var cmd = connection.CreateCommand();

            cmd.CommandText = "DROP TABLE IF EXISTS PostJson;";

            cmd.Connection = connection;
            cmd.ExecuteNonQuery();

            connection.Close();
            connection.Dispose();
        }
    }
}
