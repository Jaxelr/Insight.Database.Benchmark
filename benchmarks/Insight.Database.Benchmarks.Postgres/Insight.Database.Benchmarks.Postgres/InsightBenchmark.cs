using BenchmarkDotNet.Attributes;
using Insight.Database.Providers.PostgreSQL;
using Npgsql;

namespace Insight.Database.Benchmark.Postgres
{
    public class InsightBenchmark : BaseBenchmark
    {
        protected NpgsqlConnection connection;

        [GlobalSetup]
        public void DbSetup()
        {
            connection = new NpgsqlConnection(connectionString);
            PostgreSQLInsightDbProvider.RegisterProvider();
            connection.Open();

            var cmd = connection.CreateCommand();

            cmd.CommandText = $@"
                    DROP TABLE IF EXISTS Post;

                    CREATE TABLE IF NOT EXISTS Post
                    (
                            Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            ""Text"" Text NOT NULL,
                            CreationDate DATE NOT NULL,
                            LastChangedDate DATE NOT NULL
                    );
                    DROP TABLE IF EXISTS Comment;

                    CREATE TABLE IF NOT EXISTS Comment
                    (
                            Id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            PostId INT NOT NULL,
                            CommentText Text NOT NULL,
                            CreationDate DATE NOT NULL
                    );

                    DO $$
                    DECLARE iter integer;
                            PostId integer;
                    BEGIN
                        iter := 0;
                    WHILE iter< {iterations} LOOP
                        INSERT INTO Post(""Text"", CreationDate, LastChangedDate)
                        SELECT repeat('x', 2000), NOW(), NOW();

                        INSERT INTO Comment(CommentText, CreationDate, PostId)
                        SELECT REPEAT('x', 2000), NOW(), currval(pg_get_serial_sequence('post', 'id')) UNION ALL
                        SELECT REPEAT('x', 2000), NOW(), currval(pg_get_serial_sequence('post', 'id'));

                        iter:= iter + 1;
                    END LOOP;
                    END $$; ";

            cmd.Connection = connection;
            cmd.ExecuteNonQuery();

            cmd = connection.CreateCommand();
            cmd.CommandText = @"CREATE OR REPLACE FUNCTION SelectPost (param int) 
                                RETURNS SETOF Post
                                AS $$ 
                                SELECT Id, ""Text"", CreationDate, LastChangedDate FROM Post WHERE Id = param;
                                $$
                                LANGUAGE SQL";

            cmd.Connection = connection;
            cmd.ExecuteNonQuery();
        }

        [GlobalCleanup]
        public void DbCleanup()
        {
            var cmd = connection.CreateCommand();

            cmd.CommandText = "DROP FUNCTION IF EXISTS SelectPost; DROP TABLE IF EXISTS Post; DROP TABLE IF EXISTS Comment;";

            cmd.Connection = connection;
            cmd.ExecuteNonQuery();

            connection.Close();
            connection.Dispose();
        }
    }
}
